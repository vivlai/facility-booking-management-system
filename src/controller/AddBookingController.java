package controller;

import java.io.IOException;
import java.sql.Timestamp;
import java.util.ArrayList;
import util.DateUtil;
import java.util.Date;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import dao.BookingDao;
import dao.LocationDao;
import dao.PersonDao;
import model.Booking;
import model.Location;
import model.Person;

@WebServlet("/AddBookingController")
public class AddBookingController extends HttpServlet {
	
	/*
	 * <form action="AddBookingController" method="post">
	 *     Start Date: <input type="date" name="startDate"/> <br/>
	 *     End Date: <input type="date" name="endDate"/> <br/>
	 *     Location: <select name="location">
	 *         <% for (Location location : LocationDao.getInstance().getAllLocations()) { %>
	 *             <option value="<%=location.getId()%>"><%=location.getName()%></option> 
	 *         <% } %>
	 *     </select> <br/>
	 *     Additional Persons (comma separated email list): <input type="text" name="persons"/>
	 *     <input type="submit" value="submit"/>
	 * </form>
	 */
	
	protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
		// check if user is logged in
		Person loggedInUser = (Person) request.getSession().getAttribute("user");
		if (loggedInUser == null) {
			response.sendRedirect("login.jsp?error=You are not logged in");
			return;
		}
		String role = loggedInUser.getRole();
		
		Timestamp startDate = DateUtil.convertStringToTimestamp( request.getParameter("startDate") );
		Timestamp endDate = DateUtil.convertStringToTimestamp( request.getParameter("endDate") );
		System.out.println("current booking timestamp start: " + startDate);
		System.out.println("current booking timestamp end: " + endDate);
		
		Date dateStartDate = new Date(startDate.getTime());
		Date dateEndDate = new Date(endDate.getTime());
		System.out.println("dateStartDate: " + dateStartDate);
		System.out.println("dateEndDate: " + dateEndDate);
		
		Location location = LocationDao.getInstance().getLocation(Integer.parseInt(request.getParameter("location")));
		ArrayList<Person> persons = new ArrayList<Person>();
		String[] personEmails = request.getParameter("persons").split(",");
		for (String email : personEmails) {
			Person person = PersonDao.getInstance().getPerson(email);
			// to-do: check if person exists
			if (person == null) {
				response.sendRedirect("create.jsp?error=The email " + email + " does not exist.");
				return;
			} 
			
			persons.add(PersonDao.getInstance().getPerson(email));
		}
		persons.add(loggedInUser);
		
		// check if booking exists
		ArrayList<Booking> allBookings = BookingDao.getInstance().getAllBookings();
		Boolean isOverlap = true;
		
		for (Booking booking : allBookings) {
		  //System.out.println("current booking location id: " + location.getId());
		  //System.out.println("existing booking location id: " + booking.getLocation().getId());
		  
		  if (booking.getLocation().getId() == location.getId()) {
			  Timestamp start = booking.getStartDate();
			  Timestamp end = booking.getEndDate();
			  //System.out.println("existing booking timestamp start: " + start);
			  //System.out.println("existing booking timestamp end: " + end);
			  
			  Date existStartDate = new Date(start.getTime());
			  Date existEndDate = new Date(end.getTime());
			  //System.out.println("existStartDate: " + existStartDate);
			  //System.out.println("existEndDate: " + existEndDate);
			  
			  isOverlap = isDatesOverLapped(dateStartDate, existStartDate, dateEndDate, existEndDate);
			  //System.out.println("is overlap: " + isOverlap);
			  //System.out.println("role: " + role);
			  
			  // check if time slot has been booked
			  if (isOverlap) {
			    if (role.equals("admin")) {
			      System.out.println("1");
			      
			      System.out.println("existing booking id: " + booking.getId());
			      
			      BookingDao.getInstance().deleteBooking(booking);
			      Booking newBooking = new Booking(/*autogenerated*/ -1, startDate, endDate, persons, location);
				  BookingDao.getInstance().addBooking(newBooking);
				  // to-do: send notification to persons affected and tell them booking is overridden
				  
				  response.sendRedirect("admin-view-booking.jsp?id=" + newBooking.getId()+
							"&startDate=" + startDate + 
							"&endDate=" + endDate + 
							"&location=" + location.getLocationName());
				  return;
			    } else {
			      response.sendRedirect("student-make-booking.jsp?error=The time slot " + startDate + " to " + endDate + " has been booked. Please book another time slot.");
				  return;
			    } 
			  } 
			  
			}
		  }
		
		// if there is no overlap, normal booking resumes
		Booking newBooking = new Booking(/*autogenerated*/ -1, startDate, endDate, persons, location);
		BookingDao.getInstance().addBooking(newBooking);
		if (role.equals("admin")) {
	      // direct to admin's view
	      response.sendRedirect("admin-view-booking.jsp?id=" + newBooking.getId()+
					"&startDate=" + startDate + 
					"&endDate=" + endDate + 
					"&location=" + location.getLocationName());
		  return;
	    } else {
	      // direct to student's view
	      response.sendRedirect("student-view-booking.jsp?id=" + newBooking.getId()+
					"&startDate=" + startDate + 
					"&endDate=" + endDate + 
					"&location=" + location.getLocationName());
		  return;
	    }
		
	}
	
	public static boolean isDatesOverLapped(Date startDate1, Date endDate1, Date startDate2, Date endDate2) throws NullPointerException {
      if ((startDate1.before(startDate2) && endDate1.after(startDate2))
		        || (startDate1.before(endDate2) && endDate1.after(endDate2))
		        || (startDate1.before(startDate2) && endDate1.after(endDate2))
		        || (startDate1.equals(startDate2) && endDate1.equals(endDate2))) {
		      return Boolean.TRUE;
		    }
	  return Boolean.FALSE;
    }
}
